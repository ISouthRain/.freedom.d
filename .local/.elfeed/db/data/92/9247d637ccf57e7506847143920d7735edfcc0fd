<p>程序员的代码仓库，总是需要托管一份在服务器，这样才保险，也方便使用。</p>

        <p>今天就来谈谈 Git 服务器。</p>

<p><img src="https://cdn.beekka.com/blogimg/asset/202210/bg2022102304.webp" style="border: 0px;"></p>

<h2>一、代码托管服务</h2>

<p>一般情况下，都不建议自己搭建 Git 服务器，而要使用现成的服务，也就是代码托管服务。它们都是免费的。</p>

<blockquote>
  <ul>
<li><a href="https://github.com/">GitHub</a></li>
<li><a href="https://about.gitlab.com/">Gitlab</a></li>
<li><a href="https://bitbucket.org/">Bitbucket</a></li>
<li><a href="https://codeberg.org/">Codeberg</a></li>
<li><a href="https://sr.ht/">sourcehut</a></li>
<li><a href="https://gitee.com/">Gitee</a></li>
</ul>
</blockquote>

<p>其中，除了最后一家 Gitee 是国内的服务，其他都是国外的服务。</p>

<p>这些外部服务，就不多做介绍了。本文的重点不是它们，而是想谈如果不得不自己搭建 Git 服务器，那该怎么做。</p>

<h2>二、Git 服务器软件</h2>

<p>自己搭建 Git 服务器的原因，无非就是不方便访问外网，不愿意代码放在别人的服务器，或者有一些定制化的需求。</p>

<p>这时，你可以选择开源的 Git 服务器软件。</p>

<blockquote>
  <ul>
<li><a href="https://about.gitlab.com/install/ce-or-ee/">Gitlab CE</a></li>
<li><a href="https://gitea.io/zh-cn/">Gitea</a></li>
<li><a href="https://gogs.io/">Gogs</a></li>
<li><a href="https://github.com/theonedev/onedev">Onedev</a></li>
</ul>
</blockquote>

<p>这些软件里面，Gogs 的安装是最简单的，但是功能相对比较弱。功能越强的软件，安装越复杂。</p>

<p>如果你只是想远程保存一份代码，并不在意有没有 Web 界面，或者其他功能，那么根本不用安装上面这些软件，一行命令就够了。</p>

<h2>三、Git 仓库的 SSH 传输</h2>

<p>熟悉 Git 的同学可能知道，Git 默认支持两种传输协议：SSH 和 HTTP/HTTPS。</p>

<p>服务器一般都自带 SSH，这意味着，<strong>我们可以什么都不安装，只通过 SSH 就把仓库推到远程服务器。</strong></p>

<p>所以，一条命令就够了。我们只要在远程服务器上，建立同名的 Git 仓库，服务器就搭建好了。</p>

<blockquote><pre><code class="language-bash">
$ git init --bare [仓库名].git
</code></pre></blockquote>

<p>上面命令中，各个部分的含义如下。</p>

<p>（1）<code>git init</code>：初始化一个 Git 仓库。</p>

<p>（2）<code>--bare</code>：表示新仓库不需要工作目录，只建立 Git 数据目录。</p>

<p>（3）<code>[仓库名].git</code>：指定仓库名，比如仓库名是<code>example</code>，那么就要建立一个叫做<code>example.git</code>的 Git 数据目录。</p>

<p>执行这条命令以后，一个最简易的 Git 服务器就诞生了。后面，我们就可以通过 SSH 连接，把本地代码推送到这个远程 Git 仓库了。</p>

<h2>四、操作演示</h2>

<p>下面，我演示一下整个操作过程。</p>

<p>操作分成两部分，先在远程服务器操作，然后在本地计算机操作。</p>

<h3>4.1 远程服务器操作</h3>

<p>下面的操作都在远程服务器完成，假设你已经通过 SSH 登录上去了。不熟悉 SSH 的同学可以看参考这篇<a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">《SSH 入门》</a>。</p>

<p>登录远程服务器的目的，主要是新建一个专门的用户，所有的 Git 操作都通过该用户完成。这一步其实不是必需的，但是这样后期操作比较灵活（比如仓库可以让多人共享）。</p>

<blockquote><pre><code class="language-bash">
$ sudo mkdir /home/git
$ sudo useradd git
$ sudo mkdir -m 700 /home/git/.ssh
$ sudo cp ~/.ssh/authorized_keys /home/git/.ssh/
</code></pre></blockquote>

<p>上面命令的含义如下。</p>

<p>（1）新建新用户的主目录<code>/home/git</code>。</p>

<p>（2）新建一个用户，用户名为<code>git</code>。</p>

<p>（3）新建新用户的 SSH 目录<code>/home/git/.ssh</code>。</p>

<p>（4）把当前用户的公钥拷贝给<code>git</code>用户，以便密钥登陆，详细解释可以参考<a href="https://wangdoc.com/ssh/key.html">《SSH 密钥登录》</a>。</p>

<p>如果你只用密码登录，不使用密钥登录，那么上面第三步和第四步是不需要的，但是需要为<code>git</code>用户设定密码，命令如下。</p>

<blockquote><pre><code class="language-bash">
$ sudo passwd git
</code></pre></blockquote>

<h3>4.2 本机计算机操作</h3>

<p>后面的操作都在本地计算机完成。</p>

<p>假定上一小节的远程服务器的 IP 地址是<code>192.168.1.25</code>，本地的 Git 仓库名为<code>example</code>。</p>

<blockquote><pre><code class="language-bash">
$ ssh git@192.168.1.25 git init --bare example.git
</code></pre></blockquote>

<p>上面命令中，<code>ssh git@192.168.1.25</code>表示以<code>git</code>用户的身份，登录到远程服务器。后面的部分是 SSH 的一种语法，表示登录后在远程服务器执行的命令，即新建一个远程 Git 数据目录<code>example.git</code>。</p>

<p>这条命令运行完，就有了一个 Git 服务器了，然后就可以推送代码了。</p>

<blockquote><pre><code class="language-bash">
$ cd example
$ git remote add myServer git@192.168.1.25:example.git
$ git push myServer master
</code></pre></blockquote>

<p>上面的命令先进入本地仓库，为远程服务器加一个别名，然后把代码推送过去。</p>

<h2>五、另一种操作方法</h2>

<p>上面的例子使用<code>git init --bare</code>命令，在远程服务器新建 Git 数据目录。其实，Git 数据目录就是一个普通目录，直接从本地计算机拷贝过去也可以。</p>

<blockquote><pre><code class="language-bash">
$ scp -r example/.git git@192.168.1.25:/home/git/example.git
</code></pre></blockquote>

<p>上面的命令使用<a href="https://wangdoc.com/ssh/scp.html"><code>scp</code>工具</a>将本地的 <code>example</code>仓库里面的<code>.git</code>子目录，拷贝到远程服务器的目录<code>example.git</code>。这样也能建立 Git 服务器。</p>

<h2>六、参考链接</h2>

<ul>
<li><a href="https://rgz.ee/git.html">Host Git repositories on OpenBSD</a></li>
<li><a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server">Git on the Server</a></li>
</ul>

<p>（完）</p>

        <div style="color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#AAD2F0;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;"><h3>文档信息</h3>
<ul>
<li>版权声明：自由转载-非商用-非衍生-保持署名（<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享3.0许可证</a>）</li>
<li>发表日期： <abbr class="published" title="2022-10-23T20:19:57+08:00">2022年10月23日</abbr></li>

</ul></div>        
        <div style="color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;"></div>
    